
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper-deployment
  labels:
    app: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      # Zookeeper container
      - name: zookeeper
        image: bitnami/zookeeper
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        env:
        - name: ALLOW_ANONYMOUS_LOGIN
          value: "yes"
        resources:
          requests:
            memory: "1Gi"
            cpu: "0.5"
          limits:
            memory: "1Gi"
            cpu: "0.6"
---
### KAFKA BROKER DEPLOYMENTS DEPEND ON zookeeper-service ###
# Deployment for broker 0 - BOOTSTRAP SERVER in Kafka Cluster, so we can
# expose a BOOTSTRAP SERVER SERVICE that consumer and producer can connect to
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-b0-deployment
  labels:
    app: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
      brokerId: "0"
  template:
    metadata:
      labels:
        app: kafka
        brokerId: "0"
    spec:
      # Wait for zookeeper to start up first
      initContainers:
      - name: wait
        image: alpine
        command: ["/bin/sh", "-c", "for i in $(seq 1 300); do nc -zvw1 zookeeper-service 2181 && exit 0 || sleep 3; done; exit 1"]
      containers:
      # Kafka Broker 0
      - name: broker0
        image: bitnami/kafka
        ports:
        - containerPort: 9092
          name: internal
        - containerPort: 9093
          name: external
        - containerPort: 9094
          name: interbroker
        env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "INTERNAL_BOOTSTRAP_SERVICE:PLAINTEXT,EXTERNAL_BOOTSTRAP_SERVICE:PLAINTEXT,INTERBROKER_LISTENER:PLAINTEXT"
        - name: KAFKA_LISTENERS
          value: "INTERNAL_BOOTSTRAP_SERVICE://0.0.0.0:9092,EXTERNAL_BOOTSTRAP_SERVICE://0.0.0.0:9093,INTERBROKER_LISTENER://0.0.0.0:9094"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "INTERBROKER_LISTENER"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "INTERNAL_BOOTSTRAP_SERVICE://$(MY_POD_IP):9092,INTERBROKER_LISTENER://$(MY_POD_IP):9094,EXTERNAL_BOOTSTRAP_SERVICE://50.16.31.149:30985"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper-service:2181"
        - name: KAFKA_BROKER_ID
          value: "0"
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        resources:
          requests:
              memory: "256Mi"
              cpu: "0.5"
          limits:
            memory: "512Mi"
            cpu: "0.6"
---
# Deployment for broker 1 - BOOTSTRAP SERVER in Kafka Cluster, so we can
# expose a BOOTSTRAP SERVER SERVICE that consumer and producer can connect to
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-b1-deployment
  labels:
    app: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
      brokerId: "1"
  template:
    metadata:
      labels:
        app: kafka
        brokerId: "1"
    spec:
      # Wait for zookeeper to start up first
      initContainers:
      - name: wait
        image: alpine
        command: ["/bin/sh", "-c", "for i in $(seq 1 300); do nc -zvw1 zookeeper-service 2181 && exit 0 || sleep 3; done; exit 1"]
      containers:
      - name: broker1
        image: bitnami/kafka
        ports:
        - containerPort: 9092
          name: internal
        - containerPort: 9093
          name: external
        - containerPort: 9094
          name: interbroker
        env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "INTERNAL_BOOTSTRAP_SERVICE:PLAINTEXT,EXTERNAL_BOOTSTRAP_SERVICE:PLAINTEXT,INTERBROKER_LISTENER:PLAINTEXT"
        - name: KAFKA_LISTENERS
          value: "INTERNAL_BOOTSTRAP_SERVICE://0.0.0.0:9092,EXTERNAL_BOOTSTRAP_SERVICE://0.0.0.0:9093,INTERBROKER_LISTENER://0.0.0.0:9094"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "INTERBROKER_LISTENER"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "INTERNAL_BOOTSTRAP_SERVICE://:9092,EXTERNAL_BOOTSTRAP_SERVICE://:9093,INTERBROKER_LISTENER://$(MY_POD_IP):9094"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper-service:2181"
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        resources:
          requests:
              memory: "256Mi"
              cpu: "0.5"
          limits:
            memory: "512Mi"
            cpu: "0.6"

### END KAFKA BROKER DEPLOYMENTS DEPEND ON zookeeper-service ###

---
### COUCHDB DEPLOYMENT ###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: couchdb-deployment
  labels:
    app: couchdb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: couchdb
  template:
    metadata:
      labels:
        app: couchdb
    spec:
      containers:
      - name: couchdb
        image: couchdb
        ports:
        - containerPort: 5984
        env:
        - name: COUCHDB_USER
          value: admin
        - name: COUCHDB_PASSWORD
          value: "789456123"
        - name: NODENAME
          value: couchie-that-hurts
        resources:
          requests:
            memory: "256Mi"
            cpu: "0.5" # 250 milliCPUs
          limits:
            memory: "512Mi"
            cpu: "0.7"
### END COUCHDB DEPLOYMENT ###
---
### CONSUMER DEPLOYMENT; DOES NOT REQUIRE PUBLICLY
### EXPOSING ANY SPECIFIC PORT SO NO SERVICE ASSIGNED ###
# Consumer with custom consumer Docker image
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer-deployment
  labels:
    app: consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consumer
  template:
    metadata:
      labels:
        app: consumer
    spec:
      # Wait for couchdb and bootstrap kafka member to start first
      initContainers:
      - name: wait
        image: alpine
        command: ["sh", "-c", "for i in $(seq 1 300); do nc -zvw1 couchdb-service-internal 5984 && nc -zvw1 kafka-service-internal 9092 && exit 0 || sleep 3; done; exit 1"]
      containers:
      - name: consumer
        image: austinjhunt/5287kafkaconsumer
        env:
        - name: CONSUME_TOPIC
          value: stock-market-data
        - name: BOOTSTRAP_SERVER
          # serviceName.namespace.svc.cluster.local
          value: "kafka-service-internal:9092"
        - name: COUCHDB_SERVER
          # serviceName.namespace.svc.cluster.local
          value: "couchdb-service-internal"
        - name: COUCHDB_USER
          value: "admin"
        - name: COUCHDB_PASSWORD
          value: "789456123"
        - name: COUCHDB_DATABASE
          value: "cs5287"
        resources:
          requests:
            memory: "256Mi"
            cpu: "0.5" # 250 milliCPUs
          limits:
            memory: "512Mi"
            cpu: "0.7"
### END CONSUMER DEPLOYMENT; DOES NOT REQUIRE PUBLICLY
### EXPOSING ANY SPECIFIC PORT SO NO SERVICE ASSIGNED ###