- name: Create a VPC
  become: false
  environment: "{{ env_vars }}"
  amazon.aws.ec2_vpc_net:
    name: datapipeline_vpc
    cidr_block: 10.10.0.0/16
    region: us-east-1
    state: present
    aws_access_key: "{{ aws_access_key_id.stdout }}"
    aws_secret_key: "{{ aws_secret_access_key.stdout }}"
  register: datapipeline_vpc

- name: Create an Internet Gateway and attach to VPC
  become: false
  environment: "{{ env_vars}} "
  community.aws.ec2_vpc_igw:
    aws_access_key: "{{ aws_access_key_id.stdout }}"
    aws_secret_key: "{{ aws_secret_access_key.stdout }}"
    vpc_id: "{{ datapipeline_vpc.vpc.id }}"
    state: present
    region: us-east-1
    tags:
      app: datapipeline
  register: datapipeline_internet_gateway

- name: Create a VPC Subnet
  become: false
  environment: "{{ env_vars }}"
  amazon.aws.ec2_vpc_subnet:
    cidr: 10.10.2.0/24
    region: us-east-1
    vpc_id: "{{ datapipeline_vpc.vpc.id }}"
    state: present
    tags:
      name: datapipeline_vpc_subnet
    aws_access_key: "{{ aws_access_key_id.stdout }}"
    aws_secret_key: "{{ aws_secret_access_key.stdout }}"
  register: datapipeline_vpc_subnet

- name: Create a public route table for VPC Subnet to allow internet access
  become: false
  environment: "{{ env_vars }}"
  community.aws.ec2_vpc_route_table:
    aws_access_key: "{{ aws_access_key_id.stdout }}"
    aws_secret_key: "{{ aws_secret_access_key.stdout }}"
    vpc_id: "{{ datapipeline_vpc.vpc.id }}"
    region: us-east-1
    state: present
    tags:
      Name: datapipeline_public_route_table
    subnets:
      - "{{ datapipeline_vpc_subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ datapipeline_internet_gateway.gateway_id }}"
  register: public_route_table

- name: Create a security group to allow host reachability
  become: false
  environment: "{{ env_vars }}"
  amazon.aws.ec2_group:
    aws_access_key: "{{ aws_access_key_id.stdout }}"
    aws_secret_key: "{{ aws_secret_access_key.stdout }}"
    description: security group for kafka, epmd, couchdb, zookeeper, ssh
    name: kafka-couchdb-zookeeper-security
    vpc_id: "{{ datapipeline_vpc.vpc.id }}"
    rules:
      - proto: tcp
        ports:
        - 22
        cidr_ip: 0.0.0.0/0
        rule_desc: ssh
      - proto: tcp
        ports:
        - 2181
        cidr_ip: 0.0.0.0/0
        rule_desc: zookeeper
      - proto: tcp
        ports:
        - 4369
        cidr_ip: 0.0.0.0/0
        rule_desc: erlang port mapper daemon (epmd)
      - proto: tcp
        ports:
        - 5984
        cidr_ip: 0.0.0.0/0
        rule_desc: couchdb
      - proto: tcp
        ports:
        - 9092
        cidr_ip: 0.0.0.0/0
        rule_desc: apache kafka
    state: present
    region: us-east-1

- name: Create EC2 Instance 1
  become: false
  environment: "{{ env_vars }}"
  community.aws.ec2_instance:
    aws_access_key: "{{ aws_access_key_id.stdout }}"
    aws_secret_key: "{{ aws_secret_access_key.stdout }}"
    filters:
      "tag:app": datapipeline
      "tag:Name": cloudvm1
    key_name: aws-keypair-2
    instance_type: t2.medium
    name: cloudvm1
    vpc_subnet_id: "{{ datapipeline_vpc_subnet.subnet.id }}"
    network:
      assign_public_ip: yes
      delete_on_termination: yes
    region: us-east-1
    tags:
      # Add tags so you can start / stop by tags. Running twice should not create duplicates.
      app: datapipeline
    # Ubuntu 20.04 LTS AMI
    image_id: ami-09e67e426f25ce0d7
    state: running
    # Wait for the instances to reach their desired states before returning.
    # Does not wait for SSH, see the 'wait_for_connection' example for details.
    wait: yes
    # Security group to set up appropriate firewall rules
    security_group: kafka-couchdb-zookeeper-security
  register: ec2_1

- name: Create EC2 Instance 2
  become: false
  environment: "{{ env_vars }}"
  community.aws.ec2_instance:
    aws_access_key: "{{ aws_access_key_id.stdout }}"
    aws_secret_key: "{{ aws_secret_access_key.stdout }}"
    filters:
      "tag:app": datapipeline
      "tag:Name": cloudvm2
    key_name: aws-keypair-2
    instance_type: t2.medium
    name: cloudvm2
    vpc_subnet_id: "{{ datapipeline_vpc_subnet.subnet.id }}"
    network:
      assign_public_ip: yes
      delete_on_termination: yes
    region: us-east-1
    tags:
      # Add tags so you can start / stop by tags. Running twice should not create duplicates.
      app: datapipeline
    # Ubuntu 20.04 LTS AMI
    image_id: ami-09e67e426f25ce0d7
    state: running
    # Wait for the instances to reach their desired states before returning.
    # Does not wait for SSH, see the 'wait_for_connection' example for details.
    wait: yes
    # Security group to set up appropriate firewall rules
    security_group: kafka-couchdb-zookeeper-security
  register: ec2_2

- name: Wait for SSH to come up on VM 1 # SSH needs to work for rest of playbook to continue
  wait_for:
    host: "{{ item.public_ip_address }}"
    port: 22
    state: started
  with_items: "{{ ec2_1.instances }}"

- name: Wait for SSH to come up on VM 2 # SSH needs to work for rest of playbook to continue
  wait_for:
    host: "{{ item.public_ip_address }}"
    port: 22
    state: started
  with_items: "{{ ec2_2.instances }}"

- name: Add EC2 instance 1 to groups cloud and cloudvm0
  add_host:
    name: "{{ item.public_ip_address }}"
    ansible_ssh_private_key_file: "{{ playbook_dir }}/.ssh/aws-keypair-2.pem"
    groups:
      - cloud
      - cloudvm0
  with_items: "{{ ec2_1.instances }}"

- name: Add EC2 instance 2 to groups cloud and cloudvm1
  add_host:
    name: "{{ item.public_ip_address }}"
    ansible_ssh_private_key_file: "{{ playbook_dir }}/.ssh/aws-keypair-2.pem"
    groups:
      - cloud
      - cloudvm1
  with_items: "{{ ec2_2.instances }}"